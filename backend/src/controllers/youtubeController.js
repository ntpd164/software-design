const youtubeService = require('../services/youtubeService');
const Video = require('../models/videoModel');
const path = require('path');
const fs = require('fs');

// These should be environment variables in production
const YOUTUBE_CLIENT_ID = "992956171655-t7062fqgm0usrvog3kob2eoj7ch7mugq.apps.googleusercontent.com";
const YOUTUBE_CLIENT_SECRET = "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";
const YOUTUBE_REDIRECT_URI = "http://localhost:3000/youtube-callback"

// Initialize the YouTube service
youtubeService.initialize(
  YOUTUBE_CLIENT_ID,
  YOUTUBE_CLIENT_SECRET,
  YOUTUBE_REDIRECT_URI
);

/**
 * Get YouTube authorization URL
 */
exports.getAuthUrl = (req, res) => {
  try {
    const authUrl = youtubeService.getAuthUrl();
    res.json({
      success: true,
      authUrl
    });
  } catch (error) {
    console.error('Error getting auth URL:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to get YouTube authorization URL'
    });
  }
};

/**
 * Handle OAuth callback and exchange code for tokens
 */
exports.handleAuthCode = async (req, res) => {
  try {
    const { code } = req.body;
    
    if (!code) {
      return res.status(400).json({
        success: false,
        message: 'Authorization code is required'
      });
    }
    
    const tokens = await youtubeService.getTokenFromCode(code);
    
    res.json({
      success: true,
      tokens
    });
  } catch (error) {
    console.error('Error handling auth code:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to process authorization code'
    });
  }
};

/**
 * Upload a video to YouTube
 */
exports.uploadVideo = async (req, res) => {
  console.log('Uploading video to YouTube');
  try {
    const { videoId, title, description, tags, privacyStatus, tokens } = req.body;
    
    if (!videoId || !tokens) {
      console.log('Video ID or tokens are missing');
      return res.status(400).json({
        success: false,
        message: 'Video ID and tokens are required'
      });
    }
    
    // Set credentials from tokens
    youtubeService.oAuth2Client.setCredentials(tokens);
    
    // Try to find the video by its ID first
    let video = await Video.findById(videoId);
    
    // If not found, try to find by scriptId (since videoId might actually be a scriptId)
    if (!video) {
      console.log('Video not found by ID, trying to find by scriptId:', videoId);
      video = await Video.findOne({ scriptId: videoId });
      
      if (!video) {
        console.log('Video not found by scriptId either');
        return res.status(404).json({
          success: false,
          message: 'Video not found with provided ID'
        });
      }
      console.log('Found video by scriptId:', video._id);
    }
    
    // Get the local file path - handle if videoUrl starts with /
    const videoPath = video.videoUrl.startsWith('/') ? video.videoUrl : '/' + video.videoUrl;
    const filePath = path.join(__dirname, '../../public', videoPath);
    
    console.log('Video file path:', filePath);
    
    // Check if file exists
    if (!fs.existsSync(filePath)) {
      console.log('Video file not found at path:', filePath);
      return res.status(404).json({
        success: false,
        message: 'Video file not found on server'
      });
    }
    
    console.log('File exists, uploading to YouTube...');
    
    // Upload to YouTube
    const youtubeVideo = await youtubeService.uploadVideo(
      filePath,
      title || 'AI Generated Video',
      description || 'This video was generated by an AI video creation tool',
      tags || ['AI', 'video', 'generated'],
      privacyStatus || 'unlisted'
    );
    
    // Update the video record with YouTube info
    video.youtubeId = youtubeVideo.id;
    video.youtubeUrl = youtubeVideo.url;
    video.youtubeUploadedAt = new Date();
    await video.save();
    
    res.json({
      success: true,
      youtubeId: youtubeVideo.id,
      youtubeUrl: youtubeVideo.url
    });
  } catch (error) {
    console.error('Error uploading to YouTube:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to upload video to YouTube: ' + error.message
    });
  }
};