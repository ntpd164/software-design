const axios = require("axios");
const { MongoClient } = require("mongodb");
const cron = require("node-cron");

const uri =
  "mongodb+srv://duongngo1616:vzYfPnMrEB3yF6Qy@literature.s3u8i.mongodb.net/?retryWrites=true&w=majority";
const dbName = "literature_db";
const client = new MongoClient(uri, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const API_URL = "https://vi.wikipedia.org/w/api.php";
const PAGE_TITLES = ["Ch√≠ Ph√®o", "C√¥ b√© b√°n di√™m", "Chi·∫øc l√° cu·ªëi c√πng"]; // Danh s√°ch c√°c t√°c ph·∫©m c·∫ßn thu th·∫≠p

async function fetchPageData(title) {
  try {
    const response = await axios.get(API_URL, {
      params: {
        action: "query",
        format: "json",
        prop: "extracts",
        explaintext: true,
        titles: title,
      },
    });

    const pages = response.data.query.pages;
    const pageId = Object.keys(pages)[0];

    if (pageId === "-1") {
      console.log(`Kh√¥ng t√¨m th·∫•y: ${title}`);
      return null;
    }

    return {
      pageid: pages[pageId].pageid,
      title: pages[pageId].title,
      text: pages[pageId].extract,
    };
  } catch (error) {
    console.error("L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ API:", error);
    return null;
  }
}

async function saveToDatabase(data) {
  try {
    await client.connect();
    const db = client.db(dbName);
    const worksCollection = db.collection("works");
    const sectionsCollection = db.collection("sections");

    const normalized = normalizeData(data);

    const existingWork = await worksCollection.findOne({
      pageid: normalized.pageid,
    });
    if (existingWork) {
      console.log(`ƒê√£ t·ªìn t·∫°i: ${normalized.title}`);
      return;
    }

    const workDoc = {
      pageid: normalized.pageid,
      title: normalized.title,
      introduction: normalized.introduction,
      metadata: normalized.metadata,
      createdAt: new Date(),
    };

    const workResult = await worksCollection.insertOne(workDoc);
    const workId = workResult.insertedId;

    if (normalized.sections.length > 0) {
      const sectionDocs = normalized.sections.map((sec) => ({
        workId,
        heading: sec.heading,
        content: sec.content,
        createdAt: new Date(),
      }));
      await sectionsCollection.insertMany(sectionDocs);
    }

    console.log(`‚úÖ ƒê√£ l∆∞u: ${normalized.title}`);
  } catch (error) {
    console.error("L·ªói khi l∆∞u v√†o MongoDB:", error);
  } finally {
    await client.close();
  }
}

function normalizeData(data) {
  const text = data.text.trim();
  const cleanText = text.replace(/\r\n/g, "\n");

  const parts = cleanText.split(/\n==\s*(.+?)\s*==\n/);
  const introduction = parts[0].trim();
  const sections = [];

  for (let i = 1; i < parts.length; i += 2) {
    const heading = parts[i].trim();
    const content = parts[i + 1] ? parts[i + 1].trim() : "";
    sections.push({ heading, content });
  }

  return {
    pageid: data.pageid,
    title: data.title,
    introduction,
    sections,
    metadata: {
      source: "vi.wikisource.org",
    },
  };
}

async function scrapeAndSave() {
  console.log("üîç B·∫Øt ƒë·∫ßu thu th·∫≠p d·ªØ li·ªáu...");
  for (const title of PAGE_TITLES) {
    const pageData = await fetchPageData(title);
    if (pageData) {
      await saveToDatabase(pageData);
    }
  }
  console.log("‚úÖ Ho√†n t·∫•t thu th·∫≠p d·ªØ li·ªáu!");
}

// Ch·∫°y thu th·∫≠p ngay khi kh·ªüi ƒë·ªông
scrapeAndSave();

// Ch·∫°y t·ª± ƒë·ªông m·ªói ng√†y l√∫c 00:00 (gi·ªù m√°y ch·ªß)
cron.schedule("0 0 * * *", scrapeAndSave);
